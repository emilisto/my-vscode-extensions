/**
* @license
* Copyright 2021 Yufan You
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

const axios = require('axios').default;
const async = require('async');
const CliProgress = require('cli-progress');
const { promisify } = require('util');
const exec = promisify(require('child_process').exec);

const api = axios.create({
  headers: {
    common: {
      'Content-Type': 'application/json',
      Accept: 'application/json;api-version=6.1-preview.1;excludeUrls=true',
    },
  },
});

function queryParams(id) {
  return {
    assetTypes: null,
    filters: [{
      criteria: [
        {
          filterType: 7,
          value: id,
        },
      ],
      direction: 2,
      pageSize: 100,
      pageNumber: 1,
      sortBy: 0,
      sortOrder: 0,
      pagingToken: null,
    }],
    flags: 103,
  };
}

async function queryExtension(id) {
  try {
    return api.post('https://marketplace.visualstudio.com/_apis/public/gallery/extensionquery', queryParams(id));
  } catch (error) {
    throw Error(`Extension query error: ${id}`);
  }
}

function parseResponse(data, id) {
  const info = data.results?.[0]?.extensions?.[0];
  if (!info) {
    throw Error(`Extension not found: ${id}`);
  }
  const link = `https://marketplace.visualstudio.com/items?itemName=${info.publisher.publisherName}.${info.extensionName}`;
  const item = `-   [${info.displayName.trim()}](${link}): ${info.shortDescription}`;
  const { categories } = info;
  return { item, categories };
}

async function getExtensionList(code) {
  const { stdout } = await exec(`${code} --list-extensions`);
  return stdout.split('\n').filter((id) => id.length > 1);
}

async function genOutput(ids) {
  const tasks = [];
  const allItems = {};

  const addItemQueue = async.queue(async ({ category, item }) => {
    if (allItems[category] === undefined) {
      allItems[category] = [];
    }
    allItems[category].push(item);
  });

  const progressBar = new CliProgress.SingleBar({ clearOnComplete: true },
    CliProgress.Presets.shades_classic);
  progressBar.start(ids.length, 0);

  const finishQueue = async.queue(async () => { progressBar.increment(); });

  ids.forEach((id) => {
    tasks.push((async () => {
      const { data } = await queryExtension(id);
      const { item, categories } = parseResponse(data, id);
      const addItemPromises = [];
      categories.forEach((category) => {
        addItemPromises.push(addItemQueue.push({ category, item }));
      });
      await Promise.all(addItemPromises);
      finishQueue.push();
    })());
  });

  await Promise.all(tasks);

  progressBar.stop();

  const outputs = [`# My VS Code Extensions

This list is generated by [my-vscode-extensions](https://github.com/ouuan/my-vscode-extensions).
`];
  Object.entries(allItems).sort().forEach(([category, items]) => {
    outputs[0] += `\n-   [${category}](#${category.toLowerCase().replace(' ', '-')})`;
    outputs.push(`## ${category}

${items.sort().join('\n')}
`);
  });

  return outputs.join('\n\n');
}

async function genMyVSCodeExtensions(code) {
  const ids = await getExtensionList(code);
  return genOutput(ids);
}

module.exports = { genMyVSCodeExtensions };
